import { AfterViewInit, Component, OnInit} from '@angular/core';
import * as L from 'leaflet';
import * as d3 from 'd3';

@Component({
  selector: 'app-covertura',
  standalone: true,
  imports: [],
  templateUrl: './covertura.component.html',
  styleUrl: './covertura.component.css'
})
export class CoverturaComponent implements AfterViewInit{
  private map!: L.Map;

  private customRegionCoords: L.LatLngTuple[] = [
    [-12.186885961398, -76.93516038060726],
    [-12.18812152468031, -76.93445729684855],
    [-12.1887878143747, -76.93402454206004],
    [-12.19114893743754, -76.93204109846481],
    [-12.19190173336623, -76.93347381820826],
    [-12.19201080636206, -76.9349907310452],
    [-12.19326537890342, -76.93578774709977],
    [-12.19558426864074, -76.93423379588658],
    [-12.19758475061389, -76.93291917738769],
    [-12.20604338933488, -76.92798277114618],
    [-12.20983025341421, -76.92486400941233],
    [-12.20879694853691, -76.92392678436444],
    [-12.20722618764132, -76.92274931547784],
    [-12.2067497137216, -76.92157139997663],
    [-12.20786779178989, -76.91965112776261],
    [-12.20752148967718, -76.91926585065212],
    [-12.20628652879557, -76.91892313047241],
    [-12.20534279602118, -76.92259418579137],
    [-12.20408522548317, -76.92254419277856],
    [-12.20308705902563, -76.92340667535424],
    [-12.20231878611447, -76.92198927308087],
    [-12.20045516091419, -76.91983577644346],
    [-12.19929116363567, -76.9199767626757],
    [-12.19808260519753, -76.91746839971943],
    [-12.19520654043889, -76.91923694651379],
    [-12.19365007310417, -76.91750051109474],
    [-12.1914555193293, -76.91865314056095],
    [-12.1902484787444, -76.9193003429003],
    [-12.18862688023535, -76.91699367098903],
    [-12.18478142559332, -76.91950167437318],
    [-12.18420970773757, -76.92125282256416],
    [-12.18353072749263, -76.92184978880623],
    [-12.18207705766405, -76.92171798072597],
    [-12.18181106554831, -76.92200042155299],
    [-12.18212996535881, -76.92240250879736],
    [-12.18240506082615, -76.92305027398575],
    [-12.18150899216556, -76.92335601671672],
    [-12.18065924755586, -76.92251862907297],
    [-12.17938828733797, -76.92304209287956],
    [-12.17803981903226, -76.92381335311696],
    [-12.17791757672652, -76.92345353251831],
    [-12.17752078355461, -76.9232232548823],
    [-12.17712966531108, -76.92319950335323],
    [-12.17705657479076, -76.92281212581644],
    [-12.17707980396909, -76.92219917296077],
    [-12.17667079760084, -76.92150542772305],
    [-12.17623907858718, -76.92112375111387],
    [-12.17557971609238, -76.92171290949248],
    [-12.17544475993621, -76.92218376109872],
    [-12.17577566181509, -76.92240593215134],
    [-12.17560964814678, -76.9232321618082],
    [-12.17441026885435, -76.92396996665293],
    [-12.17440896371655, -76.92501719125234],
    [-12.17397578146909, -76.92511184207167],
    [-12.17383292579133, -76.92581053247363],
    [-12.17420752131332, -76.92649433994463],
    [-12.17213154476077, -76.92552438226457],
    [-12.17073866357627, -76.92660806674138],
    [-12.17006413544184, -76.92667938055943],
    [-12.17078350616263, -76.9276076989085],
    [-12.17283550085991, -76.92791462825998],
    [-12.17284980040215, -76.92721214715424],
    [-12.17333036925814, -76.92741474992403],
    [-12.17463716066283, -76.92987734245669],
    [-12.17513005155584, -76.93116117132392],
    [-12.17558145847821, -76.93162189622812],
    [-12.17766970953612, -76.93424674679191],
    [-12.17830892254416, -76.93565040252689],
    [-12.17875480874626, -76.93620026937265],
    [-12.18057796328727, -76.93749786191088],
    [-12.18256259539212, -76.93590383709527],
    [-12.18162954349622, -76.93428640040418],
    [-12.18001304688186, -76.93314263284033],
    [-12.17893814231205, -76.93391466789717],
    [-12.17864371860517, -76.93262111434834],
    [-12.17939895910655, -76.93236724813498],
    [-12.1795303910619, -76.93150706126622],
    [-12.17926588933358, -76.93066433413551],
    [-12.17936571048372, -76.92961129349507],
    [-12.18041280990915, -76.92937226811873],
    [-12.18154043813304, -76.92979746167639],
    [-12.18250191200976, -76.93042644420123],
    [-12.1830209638317, -76.93009352698314],
    [-12.18336415396405, -76.93076134020451],
    [-12.18305708187031, -76.93100017372826],
    [-12.18318338045117, -76.93124417232683],
    [-12.18396985493188, -76.93200713901058],
    [-12.1840796919116, -76.93250780390296],
    [-12.18433333226537, -76.93280635544789],
    [-12.18432361360186, -76.93341742295726],
    [-12.18257498382227, -76.93439630210145],
    [-12.18363634527434, -76.93517614474044],
    [-12.186885961398, -76.93516038060726],
  ];

  private initMap(): void {
    this.map = L.map('map', {
      center: [-12.192, -76.929],
      zoom: 14,
      scrollWheelZoom: true,
    });
  
    // Agregar capa base
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 16,
      minZoom: 12,
    }).addTo(this.map);
  
    // Asegurarnos de que las coordenadas son del tipo correcto
    const formattedCoords: L.LatLngTuple[] = this.customRegionCoords.map(
      (coord) => [coord[0], coord[1]] as L.LatLngTuple // Convertir explícitamente a LatLngTuple
    );
  
    // Crear el polígono
    const customRegion = L.polygon(formattedCoords, {
      color: 'blue',
      fillColor: '#30a3e6',
      fillOpacity: 0.3,
    }).addTo(this.map).bindPopup('Cobertura TESLANET');
  
    // Restringir el área visible a los límites del polígono
    this.map.setMaxBounds(customRegion.getBounds());
  
    // Agregar puntos de cobertura
    const puntosCobertura = [
      { coords: [-12.192, -76.929] as L.LatLngTuple, texto: 'San Francisco de Tablada de Lurin' },
    ];
  
    puntosCobertura.forEach((punto) => {
      L.marker(punto.coords)
        .addTo(this.map)
        .bindPopup(`<b>${punto.texto}</b>`);
    });
  }

  ngAfterViewInit(): void {
    this.initMap();
  }
}